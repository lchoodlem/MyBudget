@inject IAcctTypeService AcctTypeService
@inject IDialogService DialogService
@inject NavigationManager _navigationManger
@inject IJSRuntime _jsRuntime

<MudPaper Width="90%" Square="true">
    <div class="row at-4">
        <div class="col-6">
            <MudText Typo="Typo.h4" Class="card-title text-primary">Account Types</MudText>
        </div>
        <MudDivider></MudDivider>
        <MudDivider DividerType="DividerType.Middle"></MudDivider>
        <div class="col-4 offset-2">
            <MudButton Variant="Variant.Filled" Size=Size.Medium
                       Color="Color.Primary" Href="acctType/create">Add New Account Type</MudButton>
        </div>
        <div class="col-12">
            @if (AcctTypes.Any())
            {
                <MudTable Items="AcctTypes">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Visible</MudTh>
                        <MudTh>Active</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Name">@context.Name</MudTd>
                        <MudTd DataLabel="Visible">
                            <MudToggleIconButton @bind-Toggled="@context.Visible" Size="Size.Large"
                                             Icon="@Icons.Material.Filled.VisibilityOff" Color="Color.Error" Title="Visible"
                                             ToggledIcon="@Icons.Material.Filled.Visibility" ToggledColor="@Color.Success" ToggledTitle="InVisible" />
                            <span>@(context.Visible ? "Visible" : "Invisible")</span>
                        </MudTd>
                        <MudTd DataLabel="Active">
                            <MudToggleIconButton @bind-Toggled="@context.Deleted" Size="Size.Large"
                                             Icon="@Icons.Material.Filled.CheckBox" Color="Color.Success" Title="Active"
                                             ToggledIcon="@Icons.Material.Filled.Cancel" ToggledColor="@Color.Error" ToggledTitle="Deleted"/>
                            <span>@(context.Deleted ? "Deleted" : "Active")</span>
                        </MudTd>
                        <MudTd DataLabel="Actions">
                            <MudButton OnClick="@((e) => EditObj(context))"
                                   Variant="Variant.Text"
                                   EndIcon="@Icons.Material.Outlined.Edit"
                                   Color="Color.Default"
                                   Style="text-transform:none"
                                   Disabled=@disableEdit>
                            </MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
            else
            {
                if (isLoading)
                {
                    // loader....
                    <div class="text-center">
                        <img src="/images/ajax-loader.gif">
                    </div>
                }
                else
                {
                    <p>No records found</p>
                }
            }
        </div>
    </div>

</MudPaper>

@code {
    private IEnumerable<AcctType> AcctTypes = new List<AcctType>();
    private string objApi = "acctType";

    protected override async Task OnInitializedAsync()
    {
        await AcctTypeService.GetAcctTypes();
    }

    private int DeleteId { get; set; } = 0;
    private int EditId { get; set; } = 0;
    private bool disableEdit { get; set; } = false;
    public bool isLoading { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadObject();
        }


    }
    private async Task LoadObject()
    {
        isLoading = true;
        StateHasChanged();
        AcctTypes = await AcctTypeService.GetAcctTypes();
        isLoading = false;
        StateHasChanged();
    }

    public async Task EditObj(AcctType obj)
    {
        EditId = obj.Id;

        //Update
        _navigationManger.NavigateTo($"{objApi}/edit/{EditId}");
        await LoadObject();

    }



}