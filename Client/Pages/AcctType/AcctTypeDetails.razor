@page "/accountType/edit/{id:int}"
@page "/accountType/create"
@inject IAcctTypeService _acctTypeService
@implements IDisposable

@inject ISnackbar _snackBar
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager

@if (editingObj == null)
{
    <span>@message</span>
}
else
{

    <MudText Typo="Typo.h3" Class="card-title text-primary mb-3 ml-3">@Title Account Type</MudText>
    <MudForm Model="@editingObj" FieldChanged="@((e) => FormChanged(true))">

        <MudGrid>
            <MudItem xs="12" sm="7">
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Acct Type" HelperText="Min. 3 characters *Required" OnKeyPress="@((e) => FormChanged(true))"
                                  @bind-Value="@editingObj.Name" For="@(() => @editingObj.Name)" />
                        <MudToggleIconButton @bind-Toggled="@editingObj.Visible" 
                                         Size="Size.Large"
                                         Icon="@Icons.Material.Filled.VisibilityOff" 
                                         Color="Color.Error" Title="Invisible"
                                         ToggledIcon="@Icons.Material.Filled.Visibility" 
                                         ToggledColor="@Color.Success" ToggledTitle="Visible" />
                        <MudButton OnClick="@((e) => ToggleDelete())" 
                                   Disabled="@ReadOnlyDel"  Color="@activeColor">
                            @(ReadOnlyDel ? "Active" : "Reset to Active")
                        </MudButton>
                        <div>@(formChanged == true ? "Save changes?" : "")</div>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton OnClick="@((e) => CancelEditing())"
                               Variant="Variant.Text"
                               EndIcon="@Icons.Material.Filled.Cancel"
                               Color="Color.Warning"
                               Style="text-transform:none"
                               Disabled=false>
                        </MudButton>
                        <MudButton OnClick="@((e) => UpsertObject())"
                               Variant="Variant.Text"
                               EndIcon="@Icons.Material.Outlined.Save"
                               Color="Color.Success"
                               Style="text-transform:none"
                               Disabled=false>
                        </MudButton>
                        <div class="@(editingObj.Deleted ? "d-none" :"")">
                            <MudButton OnClick="@((e) => DeleteObject())"
                                   Variant="Variant.Text"
                                   EndIcon="@Icons.Material.Filled.Delete"
                                   Color="Color.Error"
                                   Style="text-transform:none"
                                   Disabled=false>
                            </MudButton>
                        </div>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudForm>

}

@code {
    private string message = string.Empty;
    [Parameter]
    public int Id { get; set; }
    private string returnHome = "admin/4";

    private AcctType editingObj { get; set; } = new AcctType() { IsNew = true };
    private string Title { get; set; } = "Create";
    public bool isLoading { get; set; } = true;
    private string insertUdateInfo = "updated";

    private bool formChanged { get; set; } = false;
    private MudBlazor.Color activeColor { get; set; } = Color.Success;

    private bool ReadOnlyDel { get; set; } = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Id == 0)
            {
                isLoading = false;
                StateHasChanged();
            }
            else
            {
                //Update
                Title = "Update";
                await LoadObject();
            }
        }
    }
 

    private async Task LoadObject()
    {
        isLoading = true;
        StateHasChanged();
        editingObj = new AcctType() { IsNew = true };
        editingObj = await _acctTypeService.GetAcctTypeById(Id);
        ReadOnlyDel = !editingObj.Deleted;
        if (ReadOnlyDel)
            activeColor = Color.Error;
        editingObj.IsNew = false;
        isLoading = false;
        StateHasChanged();
    }

    private void EditObject(AcctType obj)
    {
        obj.Editing = true;
        ReadOnlyDel = true;
        editingObj = obj;

    }

    private void ToggleDelete()
    {
        editingObj.Deleted = !editingObj.Deleted;
        ReadOnlyDel = !editingObj.Deleted;
        if (ReadOnlyDel)
            activeColor = Color.Error;
        formChanged = true;
        _acctTypeService.OnChange += StateHasChanged;
    }

    private void FormChanged(bool yesNo = false)
    {
            formChanged = yesNo;
    }
    private void ToggleChanged(bool toggled)
    {
        formChanged = toggled;
    }

    private async Task UpsertObject()
    {
        if (editingObj.Name == null || editingObj.Name == "")
        {
            OnClickSnack("Error", "Name is required", true);
        }
        else
        {
            if (editingObj.Id == 0)
            {
                //Create
                await _acctTypeService.AddObject(editingObj);
                insertUdateInfo = "created";
            }
            else
            {
                await _acctTypeService.UpdateObject(editingObj);
                insertUdateInfo = "updated";
            }
            OnClickSnack("Success", $"Account Type {editingObj.Name} was {insertUdateInfo}.", true);
            await _acctTypeService.GetAcctTypes();
            _navigationManager.NavigateTo(returnHome);
        }
    }

    private void OnClickSnack(string severity, string message, bool close = true)
    {
        var severityType = (Severity)Enum.Parse(typeof(Severity), severity, true);
        @if (!close)
            _snackBar.Add(message, severityType, ConfigurationBinder => { ConfigurationBinder.ShowCloseIcon = false; });
        _snackBar.Add(message, severityType);
    }

    protected override async Task OnInitializedAsync()
    {
        await _acctTypeService.GetAcctTypes(); ;
        _acctTypeService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        _acctTypeService.OnChange -= StateHasChanged;
    }

    private async Task DeleteObject()
    {
        if (editingObj.Id == 0)
            return;
        await _acctTypeService.DeleteObject(editingObj.Id);
        await _acctTypeService.GetAcctTypes();
        _navigationManager.NavigateTo(returnHome);
    }
    private async Task CancelEditing()
    {
        editingObj = new AcctType();
        await _acctTypeService.GetAcctTypes();
        _navigationManager.NavigateTo(returnHome);
    }

}
