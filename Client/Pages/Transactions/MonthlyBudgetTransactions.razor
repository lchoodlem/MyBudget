
@if (isLoading)
{
    <div class="loadingBox">
        <img src="/images/loading.gif">
    </div>
}
else
{
    <MudPaper Height="400px" Width="100%">
        <MudContainer Fixed="true">
            <MudPaper Height="400px" Width="100%" Square="true" Class="mud-theme-primary">
                <MudText Typo="Typo.h4">Monthly Budget</MudText>
                <MudText Typo="Typo.h6">Party Like its @yearBudget - Janurary @monthBudget that is</MudText>
                @if (Transactions.Count > 0)
                {
                    
                } else
                {
                   
                }

</MudPaper>
            </MudContainer>
        </MudPaper>

}
@code {
    private bool isLoading { get; set; } = false;
    public int yearBudget { get; set; } = 1999;  // parameters in MonthlyTrnasactions
    public int monthBudget { get; set; } = 1; // parameters in MonthlyTrnasactions
    public List<Transaction> Transactions {get; set;} = new List<Transaction>();

    private IEnumerable<TabMonth> tabMonth = new List<TabMonth>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //EditObject(editingObj);
        if (firstRender)
        {
            if (yearBudget == 0)
            {
                isLoading = false;
                StateHasChanged();
            }
            else
            {
                await LoadMonthly();

                StateHasChanged();

            }

        }

    }
    protected override async Task OnInitializedAsync()
    {
        if (yearBudget == 0)
        {
            isLoading = false;
            StateHasChanged();
        }
        else
        {

            await LoadMonthly();
            StateHasChanged();

        }
    }
    private async Task LoadMonthly()
    {
        isLoading = true;
        StateHasChanged();
        // load existing Transactions for Monthly Budget
        // Jan 1999 will be the Budget Date

        //editingObj = new Account() { IsNew = true };
        //editingObj = await _accountService.GetAccountById(Id);
        //ReadOnlyDel = !editingObj.Deleted;
        //if (ReadOnlyDel)
        //    activeColor = Color.Error;
        //editingObj.IsNew = false;
        isLoading = false;
        StateHasChanged();
    }

}
