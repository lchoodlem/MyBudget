@page "/organization/create"
@page "/organization/edit/{id:int}"
@implements IDisposable

@inject ISnackbar _snackbar
@inject IOrganizationService _organizationService
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager

<MudText Typo="Typo.h3" Class="card-title text-primary mb-3 ml-3">@Title Organization</MudText>
<MudPaper Class="pa-16 ma-2" Elevation="3">
    <EditForm Model="@editingObj">
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12" sm="7">
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Organization Name"
                                      OnKeyPress="@((e) => FormChanged(true))"
                                      @bind-Value="@editingObj.Name" For="@(() => @editingObj.Name)" />
                        <MudTextField Label="Phone1" Class="mt-3"
                                      OnKeyPress="@((e) => FormChanged(true))"
                                      @bind-Value="@editingObj.Phone1" For="@(() => @editingObj.Phone1)" InputType="InputType.Telephone" />
                        <MudTextField Label="Phone2" Class="mt-3"
                                      OnKeyPress="@((e) => FormChanged(true))"
                                      @bind-Value="@editingObj.Phone2" For="@(() => @editingObj.Phone2)" InputType="InputType.Telephone" />
                        <MudTextField Label="Address1" Class="mt-3"
                                      OnKeyPress="@((e) => FormChanged(true))"
                                      @bind-Value="@editingObj.Address1" For="@(() => @editingObj.Address1)" />
                        <MudTextField Label="Address2" Class="mt-3"
                                      OnKeyPress="@((e) => FormChanged(true))"
                                      @bind-Value="@editingObj.Address2" For="@(() => @editingObj.Address1)" />
                        <MudToggleIconButton @bind-Toggled="@editingObj.Visible"
                                             Size="Size.Large"
                                             Icon="@Icons.Material.Filled.VisibilityOff"
                                             Color="Color.Error" Title="Invisible"
                                             ToggledIcon="@Icons.Material.Filled.Visibility"
                                             ToggledColor="@Color.Success" ToggledTitle="Visible" />
                        <MudButton OnClick="@((e) => ToggleDelete())"
                                   Disabled="@ReadOnlyDel" Color="@activeColor">
                            @(ReadOnlyDel ? "Active" : "Reset to Active")
                        </MudButton>
                        <div>@(formChanged == true ? "Save changes?" : "")</div>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton OnClick="@((e) => CancelEditing())"
                                   Variant="Variant.Text"
                                   EndIcon="@Icons.Material.Filled.Cancel"
                                   Color="Color.Warning"
                                   Style="text-transform:none"
                                   Disabled=false>
                        </MudButton>
                        <MudButton OnClick="@((e) => UpsertObject())"
                                   Variant="Variant.Text"
                                   EndIcon="@Icons.Material.Outlined.Save"
                                   Color="Color.Success"
                                   Style="text-transform:none"
                                   Disabled=false>
                        </MudButton>
                        <MudButton OnClick="@((e) => DeleteObject())"
                                   Variant="Variant.Text"
                                   EndIcon="@Icons.Material.Filled.Delete"
                                   Color="Color.Error"
                                   Style="text-transform:none"
                                   Disabled=false>
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>

        </MudGrid>
    </EditForm>
</MudPaper>

@code {
    [Parameter]
    public int id { get; set; }

    private Organization editingObj { get; set; } = new Organization() { IsNew = true };
    private string Title { get; set; } = "Create";
    private bool isLoading { get; set; } = true;
    private string insertUpdateInfo = "updated";
    private int tabId { get; set; } = (int)TabAdmin.Organizations;
    private string returnHome = "admin";
    private bool formChanged { get; set; } = false;
    private MudBlazor.Color activeColor { set; get; } = Color.Success;

    private bool ReadOnlyDel { set; get; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EditOrganization(editingObj);
        if(firstRender)
        {
            if (id == 0)
            {
                isLoading=false;
                StateHasChanged();
            }
            else
            {
                //Update
                Title = "Update";
                await LoadObject();
            }
        }
    }

    private async Task LoadObject()
    {
        isLoading = true;
        StateHasChanged();
        editingObj = new Organization() { IsNew = true };
        editingObj = await _organizationService.GetOrganizationById(id);
        ReadOnlyDel = !editingObj.Deleted;
        if (ReadOnlyDel)
            activeColor = Color.Error;
        editingObj.IsNew = false;
        isLoading = false;
        StateHasChanged();
    }
    private void FormChanged(bool yesNo = false)
    {
        formChanged = yesNo;
    }
    private void ToggleChanged(bool toggled)
    {
        formChanged = toggled;
    }

    private void ToggleDelete()
    {
        editingObj.Deleted = !editingObj.Deleted;
        ReadOnlyDel = !editingObj.Deleted;
        if (ReadOnlyDel)
            activeColor = Color.Error;
        formChanged = true;
        _organizationService.OnChange += StateHasChanged;
    }
    private async Task UpsertObject()
    {
        if (editingObj.Name == null || editingObj.Name == "")
        {
            OnClickSnack("Error", "Name is required", true);
        }
        else
        {
            if (editingObj.Id == 0)
            {
                //Create
                await _organizationService.AddOrganization(editingObj);
                insertUpdateInfo = "created";
            }
            else
            {
                await _organizationService.UpdateOrganization(editingObj);
                insertUpdateInfo = "updated";
            }
            OnClickSnack("Success", $"Organization {editingObj.Name} was {insertUpdateInfo}.", true);
            await _organizationService.GetOrganizations();
            _navigationManager.NavigateTo(returnHome + "/" + tabId);
        }
    }

    private void OnClickSnack(string severity, string message, bool close = true)
    {
        var severityType = (Severity)Enum.Parse(typeof(Severity), severity, true);
        @if (!close)
                _snackbar.Add(message, severityType, ConfigurationBinder => { ConfigurationBinder.ShowCloseIcon = false; });
        _snackbar.Add(message, severityType);

    }

    protected override async Task OnInitializedAsync()
    {
        await _organizationService.GetOrganizations();
        _organizationService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        _organizationService.OnChange -= StateHasChanged;
    }

    private void EditOrganization(Organization organization)
    {
        organization.Editing = true;
        editingObj = organization;

    }

    private async Task DeleteObject()
    {
        if (editingObj.Id  == 0)
            return;
        await _organizationService.DeleteOrganization(editingObj.Id);
        await _organizationService.GetOrganizations();
        _navigationManager.NavigateTo(returnHome + "/" + tabId);
    }
    private async Task CancelEditing()
    {
        editingObj = new Organization();
        await _organizationService.GetOrganizations();
        _navigationManager.NavigateTo(returnHome + "/" + tabId);
    }
}
